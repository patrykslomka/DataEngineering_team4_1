# PIPELINE DEFINITION
# Name: california-housing-pipeline
# Inputs:
#    data_bucket: str
#    model_repo: str
#    project_id: str
#    testset_filename: str
#    trainset_filename: str
components:
  comp-download-data:
    executorLabel: exec-download-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-download-data-2:
    executorLabel: exec-download-data-2
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-predict-lr:
    executorLabel: exec-predict-lr
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        results:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-download-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloading the file from a google bucket \n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info('Downloaded\
          \ Data!')\n\n"
        image: python:3.10.7-slim
    exec-download-data-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''download data'''\n    from google.cloud import\
          \ storage\n    import pandas as pd\n    import logging \n    import sys\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ # Downloading the file from a google bucket \n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info('Downloaded\
          \ Data!')\n\n"
        image: python:3.10.7-slim
    exec-predict-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_lr(model: Input[Model], features: Input[Dataset], results:\
          \ Output[Dataset]):\n    \"\"\"Predict house prices using the trained Linear\
          \ Regression model.\"\"\"\n    import pandas as pd\n    import pickle  \n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load the features dataset\n    df = pd.read_csv(features.path\
          \ + \".csv\")\n\n    # Load the saved model\n    filename = model.path +\
          \ \".pkl\"\n    model_lr = pickle.load(open(filename, 'rb'))\n\n    # Select\
          \ features for prediction\n    # Ensure these match the feature names in\
          \ your California Housing dataset\n    xNew = df[['feature1', 'feature2',\
          \ 'feature3', 'feature4', 'feature5', 'feature6', 'feature7', 'feature8']]\
          \  # Replace with actual feature names\n\n    # Make predictions\n    df['predicted_price']\
          \ = model_lr.predict(xNew)\n    logging.info(f\"Predictions: {df['predicted_price'].tolist()}\"\
          )\n\n    # Save results to the output dataset\n    df.to_csv(results.path,\
          \ index=False, encoding='utf-8-sig')\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(features: Input[Dataset], out_model: Output[Model])\
          \ -> NamedTuple('outputs', metrics=dict):\n    '''Train a Linear Regression\
          \ model and return performance metrics'''\n    import pandas as pd\n   \
          \ from sklearn.linear_model import LinearRegression\n    from sklearn.model_selection\
          \ import train_test_split\n    from sklearn.metrics import mean_absolute_error,\
          \ mean_squared_error\n    import logging \n    import pickle  \n    from\
          \ typing import NamedTuple\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load dataset\n    df = pd.read_csv(features.path\
          \ + \".csv\")\n    logging.info(f\"Columns in dataset: {df.columns}\")\n\
          \n    # Split dataset into features and target variable\n    X = df.drop(columns=['median_house_value'])\
          \  # Replace with your target column\n    y = df['median_house_value']\n\
          \n    # Split the data into training and testing sets\n    x_train, x_test,\
          \ y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\
          \n    # Train the model\n    model_lr = LinearRegression()\n    model_lr.fit(x_train,\
          \ y_train)\n\n    # Calculate metrics\n    predictions = model_lr.predict(x_test)\n\
          \    metrics_dict = {\n        \"mean_absolute_error\": mean_absolute_error(y_test,\
          \ predictions),\n        \"mean_squared_error\": mean_squared_error(y_test,\
          \ predictions),\n    }\n    logging.info(f\"Metrics: {metrics_dict}\")\n\
          \n    # Save the model\n    model_file = out_model.path + \".pkl\"\n   \
          \ with open(model_file, 'wb') as f:  \n        pickle.dump(model_lr, f)\
          \   \n\n    return NamedTuple('outputs', metrics=dict)(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    \"\"\"Upload the trained model to Google Cloud Storage\
          \ (GCS).\"\"\"\n    from google.cloud import storage\n    import logging\n\
          \n    # Set up logging\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
          \n    try:\n        # Initialize GCS client\n        client = storage.Client(project=project_id)\n\
          \n        # Get the bucket and create a blob for the model\n        bucket\
          \ = client.bucket(model_repo)\n        model_file_name = f\"{model.metadata['algo']}_model{model.metadata['file_type']}\"\
          \  # e.g., 'lr_model.pkl'\n        blob = bucket.blob(model_file_name)\n\
          \n        # Upload the model file\n        blob.upload_from_filename(f\"\
          {model.path}{model.metadata['file_type']}\")\n\n        logging.info(f\"\
          Saved the model to GCP bucket: {model_repo} as {model_file_name}\")\n\n\
          \    except Exception as e:\n        logging.error(f\"Error uploading model\
          \ to GCS: {str(e)}\")\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: california-housing-pipeline
root:
  dag:
    tasks:
      download-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: trainset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data
      download-data-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data-2
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: testset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data-2
      predict-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-lr
        dependentTasks:
        - download-data-2
        - train-lr
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data-2
            model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-lr
        taskInfo:
          name: predict-lr
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data
        taskInfo:
          name: train-lr
      upload-model-to-gcs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-model-to-gcs
        dependentTasks:
        - train-lr
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-lr
          parameters:
            model_repo:
              componentInputParameter: model_repo
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: upload-model-to-gcs
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
      testset_filename:
        parameterType: STRING
      trainset_filename:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.9.0
